







Why react is opted:
React has numerous features like
if we compare based on users like how many users using react and angular
so react acount is very high since last 3-4 years and job is providing by react is very high
bcz of that i opted but job is not only reason behind it the developrs should look forward too
The biggest feature for new developrs is easy learning curve
Another reason is that we dont take care about separate html js file bcs react is provided
jsx means we can code html and js together


react featurs:
1) Single Page Application
2) Use JSX
3) Virtual dom
4) One way data binding
5) Easy learning curve
6) GreAT Comunity supported
7) Reusable component

Single Page Application: React is based on single page application concept
single page application means in normal web application in which we are clicking on any button
or selecting option from navigation bar then then the web page is reloading then that means the application is
multi page application
But in singlepage application does not the web page reload and just updste the page 
whatever we wanted to change the the application is known as single page application 
When we create react application using CRA it always create the application which will be single
page application.

Virtual DOM: first of all we understand that what is dom so whenever the html css and 
javascript file goes to browser and run first time then it will create tree like structure
this structure is also known as document object model.
so react is used special like dom called virtual dom instead of rreal dom, other js framwork updates real dom which makes
the web application slow.
whenever any react application gets loaded on screen for the first time react component
gets mounted 
NOW when any user makes changes on the screen like button click bcz of which the state variable will get updated so
in this cases the change will not directly go to real DOM insteat react uses virtual dom 
so we are having two virtual dom one virtual dom created during mounting of component so it si a copy of real dom
and anpother virtual dom contains the new updates, states 
Now this two virtual dom will get compared to each other and will check for the new changes this 
complete procedure known as "diffing algorithm"
Now the new changes will be updated in our real dom this process is known as "Reconciliation"
So manupulating virtual dom is much faster 

JSX: react use JSX(JavaScript Syntax Extension) JSX is a combination of HTML and JavaScript. 
We can embed JavaScript objects inside the HTML elements.But JSX is not supported by the browsers,
 as a result Babel compiler transcompile the code into JavaScript code. JSX makes codes easy and understandable. 
 It is easy to learn if we know HTML and JavaScript.

One Way data binding: a special feature is One-way Data Binding:Follows Unidirectional data flow or data binding.The data in react flows only in one direction 
i.e. the data is transferred from top to bottom i.e. from parent components to child components. The properties(props) in the child component cannot return 
the data to its parent component but it can have communication with the parent components to modify the states according to the provided inputs.
This is the working process of one-way data binding. This keeps everything modular and fast.

Easy Learning curve: How we can say that easy learning curve it is suppose to say that when thestudent are in college then the students aware about
html css and js bcz these are very basic technology so whenever anyone want to work with react then the guy start working with react
bcz we dont need to learn anything extra sowe can jump directly on react


Library v/s Framwork:
Library vs Framework? Library: -is a collection of functions -In case of library the Execution of code will be decided by the developers Means developers are in charge of the flow of the whole application. 
-We are choosing when and where to call the library. -in case of library its developers duty to design the structure. -library follows View model Framework: -Framework is a collection of multiple other libraries. 
-in case of framework the execution is already defined or decided.
the framework is in charge of the flow of the whole application. 
-It provides some places for we have to plug in our code, but it calls the code you plugged in as needed. -Framework provides you a structure in which we just put down the code our functionality. -it follows MVC structure (model view controller)

Named and Default export:
whenever we want to multiple export inside single file then we use named export bcz default export allow only one export inside any file
if we want named export then just put export keyword before any function/object/class component.
while importing in case of named export we enclose inside curly braces bcs we can import multiple variable form single file
but in case of default export we donot need to enclos inside curly brace while importing bcs it is only one export

What is CRA:
the create-react-app is a tool/boilerplate that allow us to create quickly and run our application quickly without any config
it is a easiest way for creating react application
while creating cra it provide a default setup which includes module bundler(webpack) and babel and other required module also

React Props:
We know that the react is all about the component and that all component are connected to each others like in parent-child / sibling relations
but if we want to communicate/pass data with each other then how it is passed then there is props comes into picture
so props are used to pass data from parent component to child component
Props 
Props are arguments passed into React components.
Props stand for "Properties." They are read-only components. It is an object which stores the value of attributes of a tag 
and work similar to the HTML attributes
Props are passed to components via HTML attributes.
props stands for properties.
React Props are like function arguments in JavaScript and attributes in HTML.

React State:
The state is an updatable structure that is used to contain data or information about the component. 
The state in a component can change over time. The change in state over time can happen as a response to user
 action or system event. A component with the state is known as stateful components. 
 It is the heart of the react component which determines the behavior of the component and how it will render. 
 They are also responsible for making a component dynamic and interactive
It can be update by using the setState() method.


LifeCycle phases and Methods>
Each component in react has a lifcycle which we can monitor and manipulate during its all phases.
basically it has three lifcycle phases:
1)Mounting
2)Updating
3)Unmounting

Mounting: In mounting phase we create the instance of component or putting
elements into the DOM.

Updating: This is the next phase of lifecycle in which the component being updated.
A component is updateed whenever there is any change in the components state/props.

Unmounting: this is the next phase in the lifecycle in this lifecycle when a componentis removed or instance of component is destroyed

all the phase have their lifecycle Methods ans gets called
1)Mounting
 1)Constructor():this method is called before anything else when the component is initiated
 2)getDerivedStateFromProps(): this method is called right before renderong the element in the dom
 3)render(): it is the only require method and will always be called and others all are optional 
 4)ComponentDidMount(): This method is called after the component is rendered

2)Updating phase
  1)getDerivestateFromProps(): This is the first method that is called when a component gets updates.
  2)shouldComponentUpdate(): in this method we can return a boolean value that specifies whether react should continue with the rendering or not 
    the default value of this method is true.
  3)Render(): this method is called when a component gets updated, it has to re-render the HTML to the DOM, with the new changes.
  4)getSnapshotBeforeUpdate(): this method we have access to the props and state before the any update, meaning that even after the update, we can check what the values were before the update.
              means this method can give previous props and state.
  5)componentDidUpdate(): The componentDidUpdate method is called after the component is updated in the DOM.

3)Unmounting Phase
  it has only one method that gets called when component gets Unmounting
  componentWillUnmount(): This method is called when the component is about to be removed from the DOM.


Hooks
useState hook:
it return a state variable and afunction which we can use for update the state variable value bcz we do not have any setState inside function component and
also it takes initial value of any state variable

update the state variable by creating a separate function or by writing in the same line

prevState concept:
this prevState is required when we want to use the initial value or the last value of the 
state when we are updating the state


useEffect hook
// useeffect is an alternative of lifcycle method
// componentDidMount, componentDidUpdate, componentWillUnmount is the most important lifecycle meethod
// useEffect hook accepts first parameter ass a callback function and second parameter is dependency array
// if we do not want that useEffect should run like a componentDidUpdate then pass an empty dependency array
// it is used when we want to make server call

//cleanUp function 
// this is the function gets executed when the onent is unmounted from the screen this is mostly used for memory leakescomp

// useContext hook 
// this hook is used to use context api
// prop drilling: if we have 4 component and we want to pass data from compo 1 to 4 then we can not directly pass data from 1 to 4
// it passes like 1 to 2 and then 2 to 3 and then 4 compo. bt the data will be use by 1st and 4th compo so over here
// 2 and 3rd compo recieving props data which even they are not used,this is known as propdrilling
// then solution of prop drilling is: context api

// context API: let we store the data at single place and then in watsover component we want to recieve data we need to make sure that
// component wrapped with context API 

// howto use context api data in the component we need useContex hook

// why useReducer
//useState v/s useReducer
// useState hook is easy to use when we are having primitive data type like num,string etc. it is still fine to 
// useState at some point for the non-primitive data types like objects when these objects having 3-4 key value pairs
// but generally we will be having big complex objects containing lots of key value pairs so to update the state, prevstate
// concept becoms complex
// and then to make it easy we use useReducer hook
// useReducer: it takes two arguments, state and reducer function
// this reducer function will be responsible to update the state variable.
// this reducer function takes two parameters state and action





************************************************************js interview questions************************************************************

diff b/w ==, === ::
these are the comparision operators and always return a boolean values like true/false.
== it compares only value of any variables
=== it compares valueas well as data type of variables
if we wantto find out data type of any variable then we use typeof operator

spread operator::
spread operator looks like thee dots ...
it is used to destructure the iterable elements like objects and arrys
it actually unpack/spread the values
so for ex ifwe want to create an obj whose value should be same as another obj thenwe use 
spread operator
let obj1={id:1,name:"rakesh"}
let obj2={...obj1, add:"ratlam"}


diff b/w var,let&const::
these are 3 diff ways of creating or declaring the variables in js
out of these 3 var used to be a part of es5/ECMAScript2014 & let and const are the part 
of latest release of js version ie ES6.
diff are:
var is global scope variable 
let and const are block scope
at the time of memory allocation they will get their memry also at different location
means var will be in global and let&const will be in script scope accoring to browser
if we will try to access var keyword variable before initialization we wil get undefined
but if we will try to aceess variable created using let/const it will through a refrence err



************************************************************Node JS interview questions************************************************************
************************************************************Node JS interview questions************************************************************
What is NPM?
NPM stands for Node Package Manager, responsible for managing all the packages and modules for Node.js.
Node Package Manager provides two main functionalities:

Provides online repositories for node.js packages/modules, which are searchable on search.nodejs.org
Provides command-line utility to install Node.js packages and also manages Node.js versions and dependencies



What are the modules in Node.js?
Modules are like JavaScript libraries that can be used in a Node.js application to include a set of functions. 
To include a module in a Node.js application, use the require() function with the parentheses containing the module's name.
In Node.js, Modules are the blocks of encapsulated code that communicates with an external application on the basis of their related functionality.
 Modules can be a single file or a collection of multiples files/folders. The reason programmers are heavily reliant on modules is because of their 
re-usability as well as the ability to break down a complex piece of code into manageable chunks
Node.js has many modules to provide the basic functionality needed for a web application. Some of them like:
Core Modules
local Modules
Third-party Modules

Core Modules: Node.js has many built-in modules that are part of the platform and comes with Node.js installation.
These modules can be loaded into the program by using the require function.
var module = require('module_name');
ex are
http module:	creates an HTTP server in Node.js.
path module:	includes methods to deal with file paths.


Local Modules: Unlike built-in and external modules, local modules are created locally in our Node.js application. 
Let’s create a simple calculating module that calculates various operations. Create a calc.js file that has the following code:
exports.add = function (x, y) { 
    return x + y; 
}; 

it is used in index.js file
var calculator = require('./calc');
var x = 50, y = 10; 
    
console.log("Addition of 50 and 10 is "
                   + calculator.add(x, y)); 

Third-party modules: Third-party modules are modules that are available online using the Node Package Manager(NPM). 
These modules can be installed in the project folder or globally. Some of the popular third-party modules are mongoose, express, angular, and react.
ex are
npm install express
npm install mongoose



what is module.exports?
The module.exports is actually a property of the module object in node.js. module. Exports is the object that is returned to the require() call.
By module.exports, we can export functions, objects, and their references from one file and can use them in other files by importing them by require() method.
Purpose:
The main purpose of module.exports is to achieve modular programming. Modular programming refers to separating the functionality of a program into independent,
 interchangeable modules, such that each contains everything necessary to execute only one aspect of the desired functionality.
 By not using module.exports it becomes difficult to write a large program without modular/reusable code.

Using module.exports we can separate business logic from other modules.

By Using it becomes easy to maintain and manage the code base in different modules.



diff types of http request?
GET: GET method is used to establish connections and receive info from the server. It is used while making API calls, where no modification of data is involved.

POST: The POST method is generally used to send data inside the entity-body section. Authentication, File Uploads, etc. are all done via POST method requests.

DELETE: This method is used to delete resources on the server.

PUT: This method is used to replace existing resources on the server with the updated resources.
HEAD: Functions similarly to GET, but sends the message request without the entity-body. 
This is used in cases when the server must not return the message-body in the response. Or in cases when the files being accessed are too large to be transmitted.
url:  https://www.geeksforgeeks.org/difference-between-http-get-and-post-methods/


CORS?
Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) 
other than its own from which a browser should permit loading resources. CORS also relies on a mechanism by which browsers make a "preflight" request to 
the server hosting the cross-origin resource, in order to check that the server will permit the actual request. In that preflight, the browser sends headers that
 indicate the HTTP method and headers that will be used in the actual request.
The CORS mechanism supports secure cross-origin requests and data transfers between browsers and servers.
An example of a cross-origin request: the front-end JavaScript code served from https://domain-a.com uses XMLHttpRequest to make a request for https://domain-b.com/data.json.

For security reasons, browsers restrict cross-origin HTTP requests initiated from scripts. For example, XMLHttpRequest and the Fetch API follow the same-origin policy. 
This means that a web application using those APIs can only request resources from the same origin the application was loaded from unless the response from other origins includes the right CORS headers.

what is nodejs?

Node.js is an open-source and cross-platform runtime environment built on Chrome’s V8 JavaScript engine for executing JavaScript code outside of a browser
Node.js is an open-source backend javascript runtime environment. It is a used as backend service where javascript works on the server-side of the application.
 This way javascript is used on both frontend and backend.

What Is Express JS?     
Express is a node js web application framework that provides broad features for building web and mobile applications.
It is used to build a single page, multipage, and hybrid web application.
It's a layer built on the top of the Node js that helps manage servers and routes.